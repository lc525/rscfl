/* configuration header
 * config.h - file generated by cmake from include/config.h.in template.
 *            Modify variables in CMakeLists.txt and/or in config.h.in but
 *            not directly in this file
 */
#ifndef _@PNAME@_CONFIG_H_
#define _@PNAME@_CONFIG_H_

#ifdef __KERNEL__
  #include <linux/types.h>
#else
  #include <sys/types.h>
#endif

#define RSCFL_PROJECT_NAME "@CMAKE_PROJECT_NAME@"
#define RSCFL_DESC "rscfl: application-centric kernel resource measurement"
#define RSCFL_KVERSION "@VERSION@"
@DEFINE_RSCFL_BENCH@

typedef struct {
  unsigned int major;
  unsigned int minor;
  unsigned int patch;
  unsigned int data_layout;
} rscfl_version_t;

static const rscfl_version_t RSCFL_VERSION =
  {@MAJOR_VERSION@, @MINOR_VERSION@, @PATCH_VERSION@, @DATA_LAYOUT_VERSION@};
static const char RSCFL_VERSION_TAG[] = "@TAG_VERSION@";
static const char RSCFL_VERSION_STR[] = "@VERSION@";

@DEFINE_VERSION_MISMATCH_POLICY@

/*
 * Debug levels
 * Mnemonic RDBG = Resourceful Debug
 */
typedef enum {
  RDBG_NONE   = 0,
  RDBG_ERROR  = 20,
  RDBG_WARN   = 30,
  RDBG_INFO   = 40,
  RDBG_FINE   = 60,
  RDBG_FINER  = 70,
  RDBG_FINEST = 99
} rscfl_debug_level;

#ifndef NDEBUG
  @DEFINE_NDEBUG@
  @DEFINE_DEBUG_LEVEL@
#endif

// resourceful configuration data structure
struct rscfl_config {
  pid_t monitored_pid; // pid of the process to monitor, set this to
                       // RSCFL_PID_SELF for self-monitoring (the default)

  short kernel_agg;    // Set this to 1 to enable kernel-side aggregation
                       // for all rscfl_acct_next calls with the same token.
                       // this is normally useful in conjunction with the
                       // IST_START and IST_STOP flags passed to
                       // rscfl_acct_next, but can be used separately as well.
                       //
                       // When setting kernel_agg to 1, one shouldn't need
                       // to perform a rscfl_acct_read after every
                       // rscfl_acct_next. The default is 1 (enabled)

  //TODO(lc525): enable probe configuration so that the application can add
  //             their own probing points
};
typedef struct rscfl_config rscfl_config;

// resourceful kernel module parameters:
//
// CPU_PIDACCT_HTBL_LOGSIZE - the size of per-cpu hash tables storing
//                            (pid, current_accounting_region) pairs (K,V).
#define CPU_PIDACCT_HTBL_LOGSIZE 6

// character device properties
// the device is mmap-ed in user space for reading accounting results
#define RSCFL_DATA_MAJOR 91
#define RSCFL_DATA_MINOR 0


// The control char device is also mmap-ed in userspace, but is used to
// indicate to resourceful that we are interested in accounting the next
// syscall.
#define RSCFL_CTRL_MAJOR 92
#define RSCFL_CTRL_MINOR 0

// Build-time options
#define ON 1
#define OFF 0

// Control whether we should disable all XEN-related code (getting shared
// pages from the hypervisor and reading rscfl-related data from them).
//
// Enabling this requires you have a rscfl-enabled XEN hypervisor!
#define XEN_ENABLED @WITH_XEN_ENABLED@

// Control whether you want rscfl-based shadow kernels support.
// Please see https://www.repository.cam.ac.uk/handle/1810/248815 for more
// details
//
// Enabling this requires a kernel with CMA (Contiguous Memory Allocation)
// support
#define SHDW_ENABLED @WITH_SHDW_ENABLED@
#endif

